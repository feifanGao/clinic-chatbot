{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","vars","AgentBar","Avatar","size","css","backgroundColor","borderColor","Message","fontWeight","MessageText","background","borderRadius","TitleBar","position","padding","TextComposer","left","right","bottom","Bot","props","imgUrl","avatar","authorName","name","text","Guest","isOwn","App","useDynamicList","list","push","remove","getKey","useState","typing","setTpying","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","requestBot","a","fetch","method","response","json","echoText","console","log","botSay","time","Date","now","title","rightIcons","key","className","map","item","ref","onSend","align","fit","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAmBMA,EAAQ,CACZC,KAAM,CACF,gBAAiB,UACjB,kBAAmB,UACnB,iBAAkB,OAClB,sBAAuB,QAE3BC,SAAU,CACNC,OAAQ,CACJC,KAAM,QAEVC,IAAK,CACDC,gBAAiB,yBACjBC,YAAa,+BAGrBC,QAAS,CACLH,IAAK,CACDI,WAAY,SAGpBC,YAAY,CACVL,IAAI,CACFM,WAAY,OACZC,aAAc,SAGlBC,SAAS,CACPR,IAAI,CACFS,SAAU,QACVC,QAAQ,sBAGZC,aAAa,CACXX,IAAI,CACFS,SAAU,QACVG,KAAM,IACNC,MAAO,IACPC,OAAQ,OAId,SAASC,EAAIC,GACX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,OAAQD,EAAME,SACtB,kBAAC,IAAD,CAAUC,WAAYH,EAAMI,MAC1B,kBAAC,IAAD,KAAcJ,EAAMK,QAK5B,SAASC,EAAMN,GACb,OACE,kBAAC,IAAD,CAASO,OAAK,EAACJ,WAAYH,EAAMI,MAC/B,kBAAC,IAAD,KAAcJ,EAAMK,OA2EXG,MAvEf,WAAgB,IAAD,EAC0BC,YAAe,IAA9CC,EADK,EACLA,KAAsBC,GADjB,EACCC,OADD,EACSC,OADT,EACiBF,MADjB,EAEQG,mBAAS,MAFjB,gCAGYA,mBAAS,cAHrB,mBAGNC,EAHM,KAGCC,EAHD,KAIPC,EAAiBC,iBAAO,MAI9BC,qBAHuB,WACrBF,EAAeG,QAAQC,eAAe,CAAEC,SAAU,aAE1B,CAACZ,IAC3B,IAAMa,EAAU,uCAAG,WAAMlB,GAAN,iBAAAmB,EAAA,6DACjBR,EAAU,aADO,SAEMS,MAAM,2CAAD,OAA4CpB,GAAO,CAC7EqB,OAAO,QAHQ,cAEXC,EAFW,gBAKMA,EAASC,OALf,OAKXC,EALW,OAMjBC,QAAQC,IAAIF,GACZG,EAAOH,EAAQ,QACfb,EAAU,aARO,4CAAH,sDAUVgB,EAAO,SAAA3B,GACXM,EAAK,CACHT,OAAO,aACPE,KAAK,MACLC,KAAKA,EACL4B,KAAKC,KAAKC,MACV5B,OAAM,KAcV,OACI,kBAAC,IAAD,CAAe5B,MAAOA,GACpB,kBAAC,IAAD,CACEyD,MAAOrB,EACPsB,WAAY,CACV,kBAAC,IAAD,CAAYC,IAAI,SACd,kBAAC,IAAD,UAIN,yBAAKC,UAAU,OAEX7B,EAAK8B,KAAI,SAACC,GACR,OACE,yBAAKH,IAAKG,EAAKR,MACdQ,EAAKlC,MAAM,kBAACD,EAAD,CAAOF,KAAMqC,EAAKrC,KAAMC,KAAMoC,EAAKpC,OAAS,kBAACN,EAAD,CAAKK,KAAMqC,EAAKrC,KAAMF,OAAQuC,EAAKvC,OAAQG,KAAMoC,EAAKpC,WAKpH,yBAAKqC,IAAKzB,KAEZ,kBAAC,IAAD,CAAc0B,OAjCP,SAAAtC,GACXM,EAAK,CACHT,OAAO,KACPE,KAAK,QACLC,KAAKA,EACL4B,KAAKC,KAAKC,MACV5B,OAAM,IAERgB,EAAWlB,KA0BL,kBAAC,IAAD,CAAKuC,MAAM,UACT,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAYC,KAAG,QClIPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.ea3159ee.chunk.js","sourcesContent":["import React,{useState,useEffect,useRef} from 'react';\nimport { useDynamicList } from 'ahooks';\nimport './App.css';\nimport { \n  ThemeProvider,\n  FixedWrapper,\n  TitleBar,\n  MessageGroup,\n  Message,\n  MessageTitle,\n  MessageText,\n  Avatar,\n  IconButton,\n  CloseIcon,\n  TextComposer,\n  Row,\n  TextInput,\n  SendButton\n} from '@livechat/ui-kit';\nconst theme = {\n  vars: {\n      'primary-color': '#427fe1',\n      'secondary-color': '#fbfbfb',\n      'tertiary-color': '#fff',\n      'avatar-border-color': 'blue',\n  },\n  AgentBar: {\n      Avatar: {\n          size: '42px',\n      },\n      css: {\n          backgroundColor: 'var(--secondary-color)',\n          borderColor: 'var(--avatar-border-color)',\n      }\n  },\n  Message: {\n      css: {\n          fontWeight: 'bold',\n      },\n  },\n  MessageText:{\n    css:{\n      background: '#ccc',\n      borderRadius: '10px'\n    }\n  },\n  TitleBar:{\n    css:{\n      position: 'fixed',\n      padding:'10px 0px 10px 0px'\n    }\n  },\n  TextComposer:{\n    css:{\n      position: 'fixed',\n      left: '0',\n      right: '0',\n      bottom: '0'\n    }\n  }\n}\nfunction Bot(props){\n  return(\n    <Row>\n      <Avatar imgUrl={props.avatar}/>\n      <Message  authorName={props.name}>\n        <MessageText>{props.text}</MessageText>\n      </Message>\n    </Row>\n  )\n}\nfunction Guest(props){\n  return(\n    <Message isOwn authorName={props.name}>\n      <MessageText>{props.text}</MessageText>\n    </Message>\n  )\n}\nfunction App() {\n  const { list, remove, getKey, push } = useDynamicList([]);\n  const [text,setText]=useState(null);\n  const [typing,setTpying]=useState('Chat test');\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n  }\n  useEffect(scrollToBottom, [list]);\n  const requestBot = async(text)=>{\n    setTpying('typing...');\n    const response = await fetch(`http://127.0.0.1:5002/v2/ask?expression=${text}`,{\n      method:\"GET\"\n    });\n    const echoText = await response.json();\n    console.log(echoText);\n    botSay(echoText['answer']);\n    setTpying('Chat test');\n  }\n  const botSay=text=>{\n    push({\n      avatar:\"/logo.jpeg\",\n      name:'bot',\n      text:text,\n      time:Date.now(),\n      isOwn:false\n    });\n  }\n  const send = text => {\n    push({\n      avatar:null,\n      name:'Guest',\n      text:text,\n      time:Date.now(),\n      isOwn:true\n    });\n    requestBot(text);\n  }\n\n  return (\n      <ThemeProvider theme={theme}>\n        <TitleBar\n          title={typing}\n          rightIcons={[\n            <IconButton key=\"close\">\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n        <div className=\"App\">\n          {\n            list.map((item)=>{\n              return(\n                <div key={item.time}>\n                {item.isOwn?<Guest name={item.name} text={item.text} />:<Bot name={item.name} avatar={item.avatar} text={item.text} />}\n                </div>\n              )\n            })\n          }\n          <div ref={messagesEndRef} />\n        </div>\n        <TextComposer onSend={send}>\n          <Row align=\"center\">\n            <TextInput />\n            <SendButton fit />\n          </Row>\n        </TextComposer>\n      </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}